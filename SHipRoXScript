local TweenService = game:GetService("TweenService")
local Player = game.Players.LocalPlayer
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local ProgressBar = Instance.new("Frame")
local ProgressText = Instance.new("TextLabel")
local Notification = Instance.new("TextLabel")

-- Setup ScreenGui
ScreenGui.Parent = Player:WaitForChild("PlayerGui")

-- Setup Frame
Frame.Size = UDim2.new(0.5, 0, 0.1, 0)
Frame.Position = UDim2.new(0.25, 0, 0.45, 0)
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.Parent = ScreenGui

-- Setup ProgressBar
ProgressBar.Size = UDim2.new(0, 0, 1, 0)
ProgressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
ProgressBar.Parent = Frame

-- Setup ProgressText
ProgressText.Size = UDim2.new(1, 0, 1, 0)
ProgressText.BackgroundTransparency = 1
ProgressText.TextColor3 = Color3.fromRGB(255, 255, 255)
ProgressText.TextScaled = true
ProgressText.Parent = Frame

-- Setup Notification
Notification.Size = UDim2.new(0.5, 0, 0.1, 0)
Notification.Position = UDim2.new(0.25, 0, 0.3, 0)
Notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Notification.TextColor3 = Color3.fromRGB(255, 255, 255)
Notification.TextScaled = true
Notification.BackgroundTransparency = 1
Notification.Parent = ScreenGui

local function showNotification(message, duration)
    Notification.Text = message
    Notification.BackgroundTransparency = 0
    wait(duration)
    Notification.BackgroundTransparency = 1
end

local function updateProgressBar(progress)
    ProgressBar.Size = UDim2.new(progress, 0, 1, 0)
    ProgressText.Text = string.format("Loading... %.2f%%", progress * 100)
end

local function intro()
    showNotification("Script Progress Please Wait", 2) -- Show starting notification
    wait(1) -- Simulate a short delay

    for i = 0, 100, 2 do -- Progress from 0 to 100 in steps of 2
        updateProgressBar(i / 100)
        wait(0.1) -- Wait a bit to simulate loading time
    end

    showNotification("Progress Complete!", 2) -- Show completion notification
    wait(1) -- Wait before removing the GUI

    -- Remove the GUI after loading is complete
    ScreenGui:Destroy()

    -- Execute the external script
    local OrionLib = loadstring(game:HttpGet('https://pastebin.com/raw/WRUyYTdY'))()
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local LocalPlayer = Players.LocalPlayer

-- Create the main window
local Window = OrionLib:MakeWindow({
    Name = "SHipRoX Hub | MVSD", 
    HidePremium = false, 
    SaveConfig = true, 
    IntroText = "SHipRoX Hub", 
    ConfigFolder = "SHipRoX_Hub"
})

-- Create the main tab
local MainTab = Window:MakeTab({
    Name = "Main Tab",
    Icon = "rbxassetid://117737275277614",
    PremiumOnly = false
})

-- Notification for welcome message
OrionLib:MakeNotification({
    Name = "Player",
    Content = "WELCOME TO SHipRoX HUB SCRIPT MVSD",
    Image = "rbxassetid://4483345998",
    Time = 8
})

-- Global variables
_G.HeadSize = 11
_G.Disabled = true
local hitboxConnection
local espEnabled = false
local espBoxes = {}

-- Function to update hitboxes
local function updateHitboxes()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
                humanoidRootPart.Transparency = 0.7
                humanoidRootPart.BrickColor = BrickColor.new("Really black")
                humanoidRootPart.Material = "Neon"
                humanoidRootPart.CanCollide = false
            end
        end
    end
end

-- Function to reset hitboxes
local function resetHitboxes()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Size = Vector3.new(2, 2, 2)
                humanoidRootPart.Transparency = 0
                humanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                humanoidRootPart.Material = "SmoothPlastic"
                humanoidRootPart.CanCollide = true
            end
        end
    end
end

-- Function to toggle hitbox
local function toggleHitbox(state)
    _G.Disabled = not state
    if state then
        hitboxConnection = RunService.RenderStepped:Connect(updateHitboxes)
    else
        if hitboxConnection then
            hitboxConnection:Disconnect()
            hitboxConnection = nil
        end
        resetHitboxes()
    end
end

-- Create a Toggle for Hitbox
MainTab:AddToggle({
    Name = "Enable Hitbox",
    Default = false,
    Callback = toggleHitbox
})

-- Hitbox Size Textbox
MainTab:AddTextbox({
    Name = "Hitbox Size",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        _G.HeadSize = tonumber(Value) or _G.HeadSize
    end
})

-- Infinite Jump Button
MainTab:AddButton({
    Name = "Infinite Jump",
    Callback = function()
local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
	if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	end
end)
    end
})

-- Fly GUI Script Button
MainTab:AddButton({
    Name = "Fly Gui Script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Shrxgames/SG-SCRIPT/refs/heads/main/Fly%20gui%20Script"))()
    end
})

-- ESP Functions
local function createESPForPlayer(player)
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart and not humanoidRootPart:FindFirstChild("EspBox") then
            local esp = Instance.new("BoxHandleAdornment")
            esp.Adornee = humanoidRootPart
            esp.ZIndex = 0
            esp.Size = Vector3.new(4, 6, 2)
            esp.Transparency = 0.5

            esp.Color3 = player.Team == LocalPlayer.Team and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            esp.AlwaysOnTop = true
            esp.Name = "EspBox"
            esp.Parent = humanoidRootPart
            table.insert(espBoxes, esp)
        end
    end
end

local function createESP()
    while espEnabled do
        wait(0.5)
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createESPForPlayer(player)
            end
        end
    end
end

local function removeESP()
    for _, esp in ipairs(espBoxes) do
        if esp and esp:IsA("BoxHandleAdornment") then
            esp:Destroy()
        end
    end
    espBoxes = {}
end

local function toggleESP(state)
    espEnabled = state
    if state then
        removeESP()
        spawn(createESP)
    else
        removeESP()
    end
end

-- Create a Toggle for ESP
MainTab:AddToggle({
    Name = "Enable ESP",
    Default = false,
    Callback = toggleESP
})

-- Player Added Event for ESP
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espEnabled then
            createESPForPlayer(player)
        end
    end)
end)

-- Walk Speed and Jump Power Changer
MainTab:AddTextbox({
    Name = "Walk Speed Changer",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        LocalPlayer.Character.Humanoid.WalkSpeed = tonumber(Value) or LocalPlayer.Character.Humanoid.WalkSpeed
    end
})

MainTab:AddTextbox({
    Name = "Jump Power Changer",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        LocalPlayer.Character.Humanoid.JumpPower = tonumber(Value) or LocalPlayer.Character.Humanoid.JumpPower
    end
})

-- Reset Button for Jump Power and Walk Speed
MainTab:AddButton({
    Name = "Reset Jump Power & Walk Speed",
    Callback = function()
        LocalPlayer.Character.Humanoid.WalkSpeed = 30
        LocalPlayer.Character.Humanoid.JumpPower = 50
    end
})

-- Noclip Functionality
local noclipEnabled = false

local function toggleNoclip(state)
    noclipEnabled = state
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

    if noclipEnabled then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end

        while noclipEnabled do
            wait()
            character:TranslateBy(Vector3.new(0, 0, 0))
        end
    else
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

MainTab:AddToggle({
    Name = "Enable Noclip",
    Default = false,
    Callback = toggleNoclip
})

-- Teleport Functionality
local TeleportTab = Window:MakeTab({
    Name = "Teleports",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local selectedPlayer = nil

local function updatePlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    return playerList
end

local playerDropdown = TeleportTab:AddDropdown({
    Name = "Select Player",
    Options = updatePlayerList(),
    Callback = function(selected)
        selectedPlayer = selected
    end
})

TeleportTab:AddButton({
    Name = "Teleport to Selected Player",
    Callback = function()
        if selectedPlayer then
            local playerToTeleport = Players:FindFirstChild(selectedPlayer)
            if playerToTeleport and playerToTeleport.Character then
                LocalPlayer.Character.HumanoidRootPart.CFrame = playerToTeleport.Character.HumanoidRootPart.CFrame
                OrionLib:MakeNotification({
                    Name = "Teleported",
                    Content = "You have been teleported to " .. selectedPlayer .. ".",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            else
                OrionLib:MakeNotification({
                    Name = "Error",
                    Content = "Cannot teleport to " .. selectedPlayer .. ". Their character may not be available.",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select a player from the dropdown.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

TeleportTab:AddButton({
    Name = "Refresh Player List",
    Callback = function()
        playerDropdown:UpdateOptions(updatePlayerList())
        OrionLib:MakeNotification({
            Name = "Player List Updated",
            Content = "The player list has been refreshed.",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})

-- Function to create a notification
local function createNotification(title, message, duration)
    OrionLib:MakeNotification({
        Title = title,
        Content = message,
        Duration = duration
    })
end

-- Function to rejoin the server
local function rejoinServer()
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local currentPlaceId = game.PlaceId
    
    -- Create a notification before rejoining
    createNotification("Rejoining Server", "You are about to rejoin the server...", 5)
    
    -- Wait for a moment before teleporting to allow the notification to be seen
    wait(5)
    
    -- Teleport the player to the current place
    TeleportService:Teleport(currentPlaceId, Players.LocalPlayer)
end

-- Create a Button for Rejoin
TeleportTab:AddButton({
    Name = "Rejoin Server",
    Callback = function()
        rejoinServer()
    end
})

-- Credits Tab
local CreditsTab = Window:MakeTab({
    Name = "Credits",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

CreditsTab:AddSection({
    Name = "Announcement"
})

CreditsTab:AddParagraph("Announcement Update", "I changed the UI to Orion lib because Kavo had many bugs and errors. The Noclip is working now. Happy New Year Everyone!")
CreditsTab:AddParagraph("Added Update", "teleport to the enemy is removed but teleport to the player is not removed.")
CreditsTab:AddLabel("Updated by SHipRoX Hub As SHRX SCRIPT")
CreditsTab:AddLabel("Subscribe To My YouTube Channel 👇")

CreditsTab:AddButton({
    Name = "YouTube Channel Link",
    Callback = function()
        setclipboard("https://www.youtube.com/@SHRX-SCRIPT")
        OrionLib:MakeNotification({
            Name = "Link Copied!",
            Content = "The link has been copied to your clipboard.",
            Image = "rbxassetid://4483345998",
            Time = 8
        })
    end
})

OrionLib:Init()
local function cleanUpWorkspace()
    for _, item in pairs(workspace:GetChildren()) do
        if item:IsA("Part") and not item:IsDescendantOf(workspace) then
            item:Destroy()
        end
    end
end

-- Function to optimize player settings
local function optimizePlayer(player)
    -- Set character's health to a reasonable value
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.Health = 100
    end

    -- Disable unnecessary features
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.PlatformStand = true -- Prevents physics calculations
    end
end

-- Clean up workspace every few seconds
while true do
    cleanUpWorkspace()
    wait(1) -- Adjust the wait time as needed
end

-- Connect to player added event to optimize settings
game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        optimizePlayer(player)
    end)
end)
end

-- Run the intro
intro()
